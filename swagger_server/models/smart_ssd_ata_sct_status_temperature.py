# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SmartSsdAtaSctStatusTemperature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, current: int=None, power_cycle_min: int=None, power_cycle_max: int=None, lifetime_min: int=None, lifetime_max: int=None, under_limit_count: int=None, over_limit_count: int=None):  # noqa: E501
        """SmartSsdAtaSctStatusTemperature - a model defined in Swagger

        :param current: The current of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type current: int
        :param power_cycle_min: The power_cycle_min of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type power_cycle_min: int
        :param power_cycle_max: The power_cycle_max of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type power_cycle_max: int
        :param lifetime_min: The lifetime_min of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type lifetime_min: int
        :param lifetime_max: The lifetime_max of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type lifetime_max: int
        :param under_limit_count: The under_limit_count of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type under_limit_count: int
        :param over_limit_count: The over_limit_count of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type over_limit_count: int
        """
        self.swagger_types = {
            'current': int,
            'power_cycle_min': int,
            'power_cycle_max': int,
            'lifetime_min': int,
            'lifetime_max': int,
            'under_limit_count': int,
            'over_limit_count': int
        }

        self.attribute_map = {
            'current': 'current',
            'power_cycle_min': 'power_cycle_min',
            'power_cycle_max': 'power_cycle_max',
            'lifetime_min': 'lifetime_min',
            'lifetime_max': 'lifetime_max',
            'under_limit_count': 'under_limit_count',
            'over_limit_count': 'over_limit_count'
        }

        self._current = current
        self._power_cycle_min = power_cycle_min
        self._power_cycle_max = power_cycle_max
        self._lifetime_min = lifetime_min
        self._lifetime_max = lifetime_max
        self._under_limit_count = under_limit_count
        self._over_limit_count = over_limit_count

    @classmethod
    def from_dict(cls, dikt) -> 'SmartSsdAtaSctStatusTemperature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmartSsd_ata_sct_status_temperature of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :rtype: SmartSsdAtaSctStatusTemperature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current(self) -> int:
        """Gets the current of this SmartSsdAtaSctStatusTemperature.


        :return: The current of this SmartSsdAtaSctStatusTemperature.
        :rtype: int
        """
        return self._current

    @current.setter
    def current(self, current: int):
        """Sets the current of this SmartSsdAtaSctStatusTemperature.


        :param current: The current of this SmartSsdAtaSctStatusTemperature.
        :type current: int
        """

        self._current = current

    @property
    def power_cycle_min(self) -> int:
        """Gets the power_cycle_min of this SmartSsdAtaSctStatusTemperature.


        :return: The power_cycle_min of this SmartSsdAtaSctStatusTemperature.
        :rtype: int
        """
        return self._power_cycle_min

    @power_cycle_min.setter
    def power_cycle_min(self, power_cycle_min: int):
        """Sets the power_cycle_min of this SmartSsdAtaSctStatusTemperature.


        :param power_cycle_min: The power_cycle_min of this SmartSsdAtaSctStatusTemperature.
        :type power_cycle_min: int
        """

        self._power_cycle_min = power_cycle_min

    @property
    def power_cycle_max(self) -> int:
        """Gets the power_cycle_max of this SmartSsdAtaSctStatusTemperature.


        :return: The power_cycle_max of this SmartSsdAtaSctStatusTemperature.
        :rtype: int
        """
        return self._power_cycle_max

    @power_cycle_max.setter
    def power_cycle_max(self, power_cycle_max: int):
        """Sets the power_cycle_max of this SmartSsdAtaSctStatusTemperature.


        :param power_cycle_max: The power_cycle_max of this SmartSsdAtaSctStatusTemperature.
        :type power_cycle_max: int
        """

        self._power_cycle_max = power_cycle_max

    @property
    def lifetime_min(self) -> int:
        """Gets the lifetime_min of this SmartSsdAtaSctStatusTemperature.


        :return: The lifetime_min of this SmartSsdAtaSctStatusTemperature.
        :rtype: int
        """
        return self._lifetime_min

    @lifetime_min.setter
    def lifetime_min(self, lifetime_min: int):
        """Sets the lifetime_min of this SmartSsdAtaSctStatusTemperature.


        :param lifetime_min: The lifetime_min of this SmartSsdAtaSctStatusTemperature.
        :type lifetime_min: int
        """

        self._lifetime_min = lifetime_min

    @property
    def lifetime_max(self) -> int:
        """Gets the lifetime_max of this SmartSsdAtaSctStatusTemperature.


        :return: The lifetime_max of this SmartSsdAtaSctStatusTemperature.
        :rtype: int
        """
        return self._lifetime_max

    @lifetime_max.setter
    def lifetime_max(self, lifetime_max: int):
        """Sets the lifetime_max of this SmartSsdAtaSctStatusTemperature.


        :param lifetime_max: The lifetime_max of this SmartSsdAtaSctStatusTemperature.
        :type lifetime_max: int
        """

        self._lifetime_max = lifetime_max

    @property
    def under_limit_count(self) -> int:
        """Gets the under_limit_count of this SmartSsdAtaSctStatusTemperature.


        :return: The under_limit_count of this SmartSsdAtaSctStatusTemperature.
        :rtype: int
        """
        return self._under_limit_count

    @under_limit_count.setter
    def under_limit_count(self, under_limit_count: int):
        """Sets the under_limit_count of this SmartSsdAtaSctStatusTemperature.


        :param under_limit_count: The under_limit_count of this SmartSsdAtaSctStatusTemperature.
        :type under_limit_count: int
        """

        self._under_limit_count = under_limit_count

    @property
    def over_limit_count(self) -> int:
        """Gets the over_limit_count of this SmartSsdAtaSctStatusTemperature.


        :return: The over_limit_count of this SmartSsdAtaSctStatusTemperature.
        :rtype: int
        """
        return self._over_limit_count

    @over_limit_count.setter
    def over_limit_count(self, over_limit_count: int):
        """Sets the over_limit_count of this SmartSsdAtaSctStatusTemperature.


        :param over_limit_count: The over_limit_count of this SmartSsdAtaSctStatusTemperature.
        :type over_limit_count: int
        """

        self._over_limit_count = over_limit_count
