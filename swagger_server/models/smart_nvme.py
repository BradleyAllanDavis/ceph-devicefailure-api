# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.smart_nvme_device import SmartNvmeDevice  # noqa: F401,E501
from swagger_server.models.smart_nvme_local_time import SmartNvmeLocalTime  # noqa: F401,E501
from swagger_server.models.smart_nvme_nvme_namespaces import SmartNvmeNvmeNamespaces  # noqa: F401,E501
from swagger_server.models.smart_nvme_nvme_pci_vendor import SmartNvmeNvmePciVendor  # noqa: F401,E501
from swagger_server.models.smart_nvme_nvme_smart_health_information_log import SmartNvmeNvmeSmartHealthInformationLog  # noqa: F401,E501
from swagger_server.models.smart_nvme_power_on_time import SmartNvmePowerOnTime  # noqa: F401,E501
from swagger_server.models.smart_nvme_size import SmartNvmeSize  # noqa: F401,E501
from swagger_server.models.smart_nvme_smart_status import SmartNvmeSmartStatus  # noqa: F401,E501
from swagger_server.models.smart_nvme_smartctl import SmartNvmeSmartctl  # noqa: F401,E501
from swagger_server.models.smart_nvme_temperature import SmartNvmeTemperature  # noqa: F401,E501
from swagger_server import util


class SmartNvme(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, json_format_version: List[int]=None, smartctl: SmartNvmeSmartctl=None, device: SmartNvmeDevice=None, model_name: str=None, serial_number: str=None, firmware_version: str=None, nvme_pci_vendor: SmartNvmeNvmePciVendor=None, nvme_ieee_oui_identifier: int=None, nvme_controller_id: int=None, nvme_number_of_namespaces: int=None, nvme_namespaces: List[SmartNvmeNvmeNamespaces]=None, user_capacity: SmartNvmeSize=None, logical_block_size: int=None, local_time: SmartNvmeLocalTime=None, smart_status: SmartNvmeSmartStatus=None, nvme_smart_health_information_log: SmartNvmeNvmeSmartHealthInformationLog=None, temperature: SmartNvmeTemperature=None, power_cycle_count: int=None, power_on_time: SmartNvmePowerOnTime=None):  # noqa: E501
        """SmartNvme - a model defined in Swagger

        :param json_format_version: The json_format_version of this SmartNvme.  # noqa: E501
        :type json_format_version: List[int]
        :param smartctl: The smartctl of this SmartNvme.  # noqa: E501
        :type smartctl: SmartNvmeSmartctl
        :param device: The device of this SmartNvme.  # noqa: E501
        :type device: SmartNvmeDevice
        :param model_name: The model_name of this SmartNvme.  # noqa: E501
        :type model_name: str
        :param serial_number: The serial_number of this SmartNvme.  # noqa: E501
        :type serial_number: str
        :param firmware_version: The firmware_version of this SmartNvme.  # noqa: E501
        :type firmware_version: str
        :param nvme_pci_vendor: The nvme_pci_vendor of this SmartNvme.  # noqa: E501
        :type nvme_pci_vendor: SmartNvmeNvmePciVendor
        :param nvme_ieee_oui_identifier: The nvme_ieee_oui_identifier of this SmartNvme.  # noqa: E501
        :type nvme_ieee_oui_identifier: int
        :param nvme_controller_id: The nvme_controller_id of this SmartNvme.  # noqa: E501
        :type nvme_controller_id: int
        :param nvme_number_of_namespaces: The nvme_number_of_namespaces of this SmartNvme.  # noqa: E501
        :type nvme_number_of_namespaces: int
        :param nvme_namespaces: The nvme_namespaces of this SmartNvme.  # noqa: E501
        :type nvme_namespaces: List[SmartNvmeNvmeNamespaces]
        :param user_capacity: The user_capacity of this SmartNvme.  # noqa: E501
        :type user_capacity: SmartNvmeSize
        :param logical_block_size: The logical_block_size of this SmartNvme.  # noqa: E501
        :type logical_block_size: int
        :param local_time: The local_time of this SmartNvme.  # noqa: E501
        :type local_time: SmartNvmeLocalTime
        :param smart_status: The smart_status of this SmartNvme.  # noqa: E501
        :type smart_status: SmartNvmeSmartStatus
        :param nvme_smart_health_information_log: The nvme_smart_health_information_log of this SmartNvme.  # noqa: E501
        :type nvme_smart_health_information_log: SmartNvmeNvmeSmartHealthInformationLog
        :param temperature: The temperature of this SmartNvme.  # noqa: E501
        :type temperature: SmartNvmeTemperature
        :param power_cycle_count: The power_cycle_count of this SmartNvme.  # noqa: E501
        :type power_cycle_count: int
        :param power_on_time: The power_on_time of this SmartNvme.  # noqa: E501
        :type power_on_time: SmartNvmePowerOnTime
        """
        self.swagger_types = {
            'json_format_version': List[int],
            'smartctl': SmartNvmeSmartctl,
            'device': SmartNvmeDevice,
            'model_name': str,
            'serial_number': str,
            'firmware_version': str,
            'nvme_pci_vendor': SmartNvmeNvmePciVendor,
            'nvme_ieee_oui_identifier': int,
            'nvme_controller_id': int,
            'nvme_number_of_namespaces': int,
            'nvme_namespaces': List[SmartNvmeNvmeNamespaces],
            'user_capacity': SmartNvmeSize,
            'logical_block_size': int,
            'local_time': SmartNvmeLocalTime,
            'smart_status': SmartNvmeSmartStatus,
            'nvme_smart_health_information_log': SmartNvmeNvmeSmartHealthInformationLog,
            'temperature': SmartNvmeTemperature,
            'power_cycle_count': int,
            'power_on_time': SmartNvmePowerOnTime
        }

        self.attribute_map = {
            'json_format_version': 'json_format_version',
            'smartctl': 'smartctl',
            'device': 'device',
            'model_name': 'model_name',
            'serial_number': 'serial_number',
            'firmware_version': 'firmware_version',
            'nvme_pci_vendor': 'nvme_pci_vendor',
            'nvme_ieee_oui_identifier': 'nvme_ieee_oui_identifier',
            'nvme_controller_id': 'nvme_controller_id',
            'nvme_number_of_namespaces': 'nvme_number_of_namespaces',
            'nvme_namespaces': 'nvme_namespaces',
            'user_capacity': 'user_capacity',
            'logical_block_size': 'logical_block_size',
            'local_time': 'local_time',
            'smart_status': 'smart_status',
            'nvme_smart_health_information_log': 'nvme_smart_health_information_log',
            'temperature': 'temperature',
            'power_cycle_count': 'power_cycle_count',
            'power_on_time': 'power_on_time'
        }

        self._json_format_version = json_format_version
        self._smartctl = smartctl
        self._device = device
        self._model_name = model_name
        self._serial_number = serial_number
        self._firmware_version = firmware_version
        self._nvme_pci_vendor = nvme_pci_vendor
        self._nvme_ieee_oui_identifier = nvme_ieee_oui_identifier
        self._nvme_controller_id = nvme_controller_id
        self._nvme_number_of_namespaces = nvme_number_of_namespaces
        self._nvme_namespaces = nvme_namespaces
        self._user_capacity = user_capacity
        self._logical_block_size = logical_block_size
        self._local_time = local_time
        self._smart_status = smart_status
        self._nvme_smart_health_information_log = nvme_smart_health_information_log
        self._temperature = temperature
        self._power_cycle_count = power_cycle_count
        self._power_on_time = power_on_time

    @classmethod
    def from_dict(cls, dikt) -> 'SmartNvme':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmartNvme of this SmartNvme.  # noqa: E501
        :rtype: SmartNvme
        """
        return util.deserialize_model(dikt, cls)

    @property
    def json_format_version(self) -> List[int]:
        """Gets the json_format_version of this SmartNvme.


        :return: The json_format_version of this SmartNvme.
        :rtype: List[int]
        """
        return self._json_format_version

    @json_format_version.setter
    def json_format_version(self, json_format_version: List[int]):
        """Sets the json_format_version of this SmartNvme.


        :param json_format_version: The json_format_version of this SmartNvme.
        :type json_format_version: List[int]
        """

        self._json_format_version = json_format_version

    @property
    def smartctl(self) -> SmartNvmeSmartctl:
        """Gets the smartctl of this SmartNvme.


        :return: The smartctl of this SmartNvme.
        :rtype: SmartNvmeSmartctl
        """
        return self._smartctl

    @smartctl.setter
    def smartctl(self, smartctl: SmartNvmeSmartctl):
        """Sets the smartctl of this SmartNvme.


        :param smartctl: The smartctl of this SmartNvme.
        :type smartctl: SmartNvmeSmartctl
        """

        self._smartctl = smartctl

    @property
    def device(self) -> SmartNvmeDevice:
        """Gets the device of this SmartNvme.


        :return: The device of this SmartNvme.
        :rtype: SmartNvmeDevice
        """
        return self._device

    @device.setter
    def device(self, device: SmartNvmeDevice):
        """Sets the device of this SmartNvme.


        :param device: The device of this SmartNvme.
        :type device: SmartNvmeDevice
        """

        self._device = device

    @property
    def model_name(self) -> str:
        """Gets the model_name of this SmartNvme.


        :return: The model_name of this SmartNvme.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this SmartNvme.


        :param model_name: The model_name of this SmartNvme.
        :type model_name: str
        """

        self._model_name = model_name

    @property
    def serial_number(self) -> str:
        """Gets the serial_number of this SmartNvme.


        :return: The serial_number of this SmartNvme.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number: str):
        """Sets the serial_number of this SmartNvme.


        :param serial_number: The serial_number of this SmartNvme.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def firmware_version(self) -> str:
        """Gets the firmware_version of this SmartNvme.


        :return: The firmware_version of this SmartNvme.
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version: str):
        """Sets the firmware_version of this SmartNvme.


        :param firmware_version: The firmware_version of this SmartNvme.
        :type firmware_version: str
        """

        self._firmware_version = firmware_version

    @property
    def nvme_pci_vendor(self) -> SmartNvmeNvmePciVendor:
        """Gets the nvme_pci_vendor of this SmartNvme.


        :return: The nvme_pci_vendor of this SmartNvme.
        :rtype: SmartNvmeNvmePciVendor
        """
        return self._nvme_pci_vendor

    @nvme_pci_vendor.setter
    def nvme_pci_vendor(self, nvme_pci_vendor: SmartNvmeNvmePciVendor):
        """Sets the nvme_pci_vendor of this SmartNvme.


        :param nvme_pci_vendor: The nvme_pci_vendor of this SmartNvme.
        :type nvme_pci_vendor: SmartNvmeNvmePciVendor
        """

        self._nvme_pci_vendor = nvme_pci_vendor

    @property
    def nvme_ieee_oui_identifier(self) -> int:
        """Gets the nvme_ieee_oui_identifier of this SmartNvme.


        :return: The nvme_ieee_oui_identifier of this SmartNvme.
        :rtype: int
        """
        return self._nvme_ieee_oui_identifier

    @nvme_ieee_oui_identifier.setter
    def nvme_ieee_oui_identifier(self, nvme_ieee_oui_identifier: int):
        """Sets the nvme_ieee_oui_identifier of this SmartNvme.


        :param nvme_ieee_oui_identifier: The nvme_ieee_oui_identifier of this SmartNvme.
        :type nvme_ieee_oui_identifier: int
        """

        self._nvme_ieee_oui_identifier = nvme_ieee_oui_identifier

    @property
    def nvme_controller_id(self) -> int:
        """Gets the nvme_controller_id of this SmartNvme.


        :return: The nvme_controller_id of this SmartNvme.
        :rtype: int
        """
        return self._nvme_controller_id

    @nvme_controller_id.setter
    def nvme_controller_id(self, nvme_controller_id: int):
        """Sets the nvme_controller_id of this SmartNvme.


        :param nvme_controller_id: The nvme_controller_id of this SmartNvme.
        :type nvme_controller_id: int
        """

        self._nvme_controller_id = nvme_controller_id

    @property
    def nvme_number_of_namespaces(self) -> int:
        """Gets the nvme_number_of_namespaces of this SmartNvme.


        :return: The nvme_number_of_namespaces of this SmartNvme.
        :rtype: int
        """
        return self._nvme_number_of_namespaces

    @nvme_number_of_namespaces.setter
    def nvme_number_of_namespaces(self, nvme_number_of_namespaces: int):
        """Sets the nvme_number_of_namespaces of this SmartNvme.


        :param nvme_number_of_namespaces: The nvme_number_of_namespaces of this SmartNvme.
        :type nvme_number_of_namespaces: int
        """

        self._nvme_number_of_namespaces = nvme_number_of_namespaces

    @property
    def nvme_namespaces(self) -> List[SmartNvmeNvmeNamespaces]:
        """Gets the nvme_namespaces of this SmartNvme.


        :return: The nvme_namespaces of this SmartNvme.
        :rtype: List[SmartNvmeNvmeNamespaces]
        """
        return self._nvme_namespaces

    @nvme_namespaces.setter
    def nvme_namespaces(self, nvme_namespaces: List[SmartNvmeNvmeNamespaces]):
        """Sets the nvme_namespaces of this SmartNvme.


        :param nvme_namespaces: The nvme_namespaces of this SmartNvme.
        :type nvme_namespaces: List[SmartNvmeNvmeNamespaces]
        """

        self._nvme_namespaces = nvme_namespaces

    @property
    def user_capacity(self) -> SmartNvmeSize:
        """Gets the user_capacity of this SmartNvme.


        :return: The user_capacity of this SmartNvme.
        :rtype: SmartNvmeSize
        """
        return self._user_capacity

    @user_capacity.setter
    def user_capacity(self, user_capacity: SmartNvmeSize):
        """Sets the user_capacity of this SmartNvme.


        :param user_capacity: The user_capacity of this SmartNvme.
        :type user_capacity: SmartNvmeSize
        """

        self._user_capacity = user_capacity

    @property
    def logical_block_size(self) -> int:
        """Gets the logical_block_size of this SmartNvme.


        :return: The logical_block_size of this SmartNvme.
        :rtype: int
        """
        return self._logical_block_size

    @logical_block_size.setter
    def logical_block_size(self, logical_block_size: int):
        """Sets the logical_block_size of this SmartNvme.


        :param logical_block_size: The logical_block_size of this SmartNvme.
        :type logical_block_size: int
        """

        self._logical_block_size = logical_block_size

    @property
    def local_time(self) -> SmartNvmeLocalTime:
        """Gets the local_time of this SmartNvme.


        :return: The local_time of this SmartNvme.
        :rtype: SmartNvmeLocalTime
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time: SmartNvmeLocalTime):
        """Sets the local_time of this SmartNvme.


        :param local_time: The local_time of this SmartNvme.
        :type local_time: SmartNvmeLocalTime
        """

        self._local_time = local_time

    @property
    def smart_status(self) -> SmartNvmeSmartStatus:
        """Gets the smart_status of this SmartNvme.


        :return: The smart_status of this SmartNvme.
        :rtype: SmartNvmeSmartStatus
        """
        return self._smart_status

    @smart_status.setter
    def smart_status(self, smart_status: SmartNvmeSmartStatus):
        """Sets the smart_status of this SmartNvme.


        :param smart_status: The smart_status of this SmartNvme.
        :type smart_status: SmartNvmeSmartStatus
        """

        self._smart_status = smart_status

    @property
    def nvme_smart_health_information_log(self) -> SmartNvmeNvmeSmartHealthInformationLog:
        """Gets the nvme_smart_health_information_log of this SmartNvme.


        :return: The nvme_smart_health_information_log of this SmartNvme.
        :rtype: SmartNvmeNvmeSmartHealthInformationLog
        """
        return self._nvme_smart_health_information_log

    @nvme_smart_health_information_log.setter
    def nvme_smart_health_information_log(self, nvme_smart_health_information_log: SmartNvmeNvmeSmartHealthInformationLog):
        """Sets the nvme_smart_health_information_log of this SmartNvme.


        :param nvme_smart_health_information_log: The nvme_smart_health_information_log of this SmartNvme.
        :type nvme_smart_health_information_log: SmartNvmeNvmeSmartHealthInformationLog
        """

        self._nvme_smart_health_information_log = nvme_smart_health_information_log

    @property
    def temperature(self) -> SmartNvmeTemperature:
        """Gets the temperature of this SmartNvme.


        :return: The temperature of this SmartNvme.
        :rtype: SmartNvmeTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: SmartNvmeTemperature):
        """Sets the temperature of this SmartNvme.


        :param temperature: The temperature of this SmartNvme.
        :type temperature: SmartNvmeTemperature
        """

        self._temperature = temperature

    @property
    def power_cycle_count(self) -> int:
        """Gets the power_cycle_count of this SmartNvme.


        :return: The power_cycle_count of this SmartNvme.
        :rtype: int
        """
        return self._power_cycle_count

    @power_cycle_count.setter
    def power_cycle_count(self, power_cycle_count: int):
        """Sets the power_cycle_count of this SmartNvme.


        :param power_cycle_count: The power_cycle_count of this SmartNvme.
        :type power_cycle_count: int
        """

        self._power_cycle_count = power_cycle_count

    @property
    def power_on_time(self) -> SmartNvmePowerOnTime:
        """Gets the power_on_time of this SmartNvme.


        :return: The power_on_time of this SmartNvme.
        :rtype: SmartNvmePowerOnTime
        """
        return self._power_on_time

    @power_on_time.setter
    def power_on_time(self, power_on_time: SmartNvmePowerOnTime):
        """Sets the power_on_time of this SmartNvme.


        :param power_on_time: The power_on_time of this SmartNvme.
        :type power_on_time: SmartNvmePowerOnTime
        """

        self._power_on_time = power_on_time
