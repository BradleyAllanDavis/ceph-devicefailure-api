# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.smart_ssd_ata_sct_status_temperature import SmartSsdAtaSctStatusTemperature  # noqa: F401,E501
from swagger_server.models.smart_ssd_ata_smart_data_offline_data_collection_status import SmartSsdAtaSmartDataOfflineDataCollectionStatus  # noqa: F401,E501
from swagger_server import util


class SmartSsdAtaSctStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, format_version: int=None, sct_version: int=None, device_state: SmartSsdAtaSmartDataOfflineDataCollectionStatus=None, temperature: SmartSsdAtaSctStatusTemperature=None, vendor_specific: List[int]=None):  # noqa: E501
        """SmartSsdAtaSctStatus - a model defined in Swagger

        :param format_version: The format_version of this SmartSsdAtaSctStatus.  # noqa: E501
        :type format_version: int
        :param sct_version: The sct_version of this SmartSsdAtaSctStatus.  # noqa: E501
        :type sct_version: int
        :param device_state: The device_state of this SmartSsdAtaSctStatus.  # noqa: E501
        :type device_state: SmartSsdAtaSmartDataOfflineDataCollectionStatus
        :param temperature: The temperature of this SmartSsdAtaSctStatus.  # noqa: E501
        :type temperature: SmartSsdAtaSctStatusTemperature
        :param vendor_specific: The vendor_specific of this SmartSsdAtaSctStatus.  # noqa: E501
        :type vendor_specific: List[int]
        """
        self.swagger_types = {
            'format_version': int,
            'sct_version': int,
            'device_state': SmartSsdAtaSmartDataOfflineDataCollectionStatus,
            'temperature': SmartSsdAtaSctStatusTemperature,
            'vendor_specific': List[int]
        }

        self.attribute_map = {
            'format_version': 'format_version',
            'sct_version': 'sct_version',
            'device_state': 'device_state',
            'temperature': 'temperature',
            'vendor_specific': 'vendor_specific'
        }

        self._format_version = format_version
        self._sct_version = sct_version
        self._device_state = device_state
        self._temperature = temperature
        self._vendor_specific = vendor_specific

    @classmethod
    def from_dict(cls, dikt) -> 'SmartSsdAtaSctStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmartSsd_ata_sct_status of this SmartSsdAtaSctStatus.  # noqa: E501
        :rtype: SmartSsdAtaSctStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format_version(self) -> int:
        """Gets the format_version of this SmartSsdAtaSctStatus.


        :return: The format_version of this SmartSsdAtaSctStatus.
        :rtype: int
        """
        return self._format_version

    @format_version.setter
    def format_version(self, format_version: int):
        """Sets the format_version of this SmartSsdAtaSctStatus.


        :param format_version: The format_version of this SmartSsdAtaSctStatus.
        :type format_version: int
        """

        self._format_version = format_version

    @property
    def sct_version(self) -> int:
        """Gets the sct_version of this SmartSsdAtaSctStatus.


        :return: The sct_version of this SmartSsdAtaSctStatus.
        :rtype: int
        """
        return self._sct_version

    @sct_version.setter
    def sct_version(self, sct_version: int):
        """Sets the sct_version of this SmartSsdAtaSctStatus.


        :param sct_version: The sct_version of this SmartSsdAtaSctStatus.
        :type sct_version: int
        """

        self._sct_version = sct_version

    @property
    def device_state(self) -> SmartSsdAtaSmartDataOfflineDataCollectionStatus:
        """Gets the device_state of this SmartSsdAtaSctStatus.


        :return: The device_state of this SmartSsdAtaSctStatus.
        :rtype: SmartSsdAtaSmartDataOfflineDataCollectionStatus
        """
        return self._device_state

    @device_state.setter
    def device_state(self, device_state: SmartSsdAtaSmartDataOfflineDataCollectionStatus):
        """Sets the device_state of this SmartSsdAtaSctStatus.


        :param device_state: The device_state of this SmartSsdAtaSctStatus.
        :type device_state: SmartSsdAtaSmartDataOfflineDataCollectionStatus
        """

        self._device_state = device_state

    @property
    def temperature(self) -> SmartSsdAtaSctStatusTemperature:
        """Gets the temperature of this SmartSsdAtaSctStatus.


        :return: The temperature of this SmartSsdAtaSctStatus.
        :rtype: SmartSsdAtaSctStatusTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: SmartSsdAtaSctStatusTemperature):
        """Sets the temperature of this SmartSsdAtaSctStatus.


        :param temperature: The temperature of this SmartSsdAtaSctStatus.
        :type temperature: SmartSsdAtaSctStatusTemperature
        """

        self._temperature = temperature

    @property
    def vendor_specific(self) -> List[int]:
        """Gets the vendor_specific of this SmartSsdAtaSctStatus.


        :return: The vendor_specific of this SmartSsdAtaSctStatus.
        :rtype: List[int]
        """
        return self._vendor_specific

    @vendor_specific.setter
    def vendor_specific(self, vendor_specific: List[int]):
        """Sets the vendor_specific of this SmartSsdAtaSctStatus.


        :param vendor_specific: The vendor_specific of this SmartSsdAtaSctStatus.
        :type vendor_specific: List[int]
        """

        self._vendor_specific = vendor_specific
