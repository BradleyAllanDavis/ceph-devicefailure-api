# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SmartSsdTemperature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, current: int=None, power_cycle_min: int=None, power_cycle_max: int=None, lifetime_min: int=None, lifetime_max: int=None, op_limit_min: int=None, op_limit_max: int=None, limit_min: int=None, limit_max: int=None):  # noqa: E501
        """SmartSsdTemperature - a model defined in Swagger

        :param current: The current of this SmartSsdTemperature.  # noqa: E501
        :type current: int
        :param power_cycle_min: The power_cycle_min of this SmartSsdTemperature.  # noqa: E501
        :type power_cycle_min: int
        :param power_cycle_max: The power_cycle_max of this SmartSsdTemperature.  # noqa: E501
        :type power_cycle_max: int
        :param lifetime_min: The lifetime_min of this SmartSsdTemperature.  # noqa: E501
        :type lifetime_min: int
        :param lifetime_max: The lifetime_max of this SmartSsdTemperature.  # noqa: E501
        :type lifetime_max: int
        :param op_limit_min: The op_limit_min of this SmartSsdTemperature.  # noqa: E501
        :type op_limit_min: int
        :param op_limit_max: The op_limit_max of this SmartSsdTemperature.  # noqa: E501
        :type op_limit_max: int
        :param limit_min: The limit_min of this SmartSsdTemperature.  # noqa: E501
        :type limit_min: int
        :param limit_max: The limit_max of this SmartSsdTemperature.  # noqa: E501
        :type limit_max: int
        """
        self.swagger_types = {
            'current': int,
            'power_cycle_min': int,
            'power_cycle_max': int,
            'lifetime_min': int,
            'lifetime_max': int,
            'op_limit_min': int,
            'op_limit_max': int,
            'limit_min': int,
            'limit_max': int
        }

        self.attribute_map = {
            'current': 'current',
            'power_cycle_min': 'power_cycle_min',
            'power_cycle_max': 'power_cycle_max',
            'lifetime_min': 'lifetime_min',
            'lifetime_max': 'lifetime_max',
            'op_limit_min': 'op_limit_min',
            'op_limit_max': 'op_limit_max',
            'limit_min': 'limit_min',
            'limit_max': 'limit_max'
        }

        self._current = current
        self._power_cycle_min = power_cycle_min
        self._power_cycle_max = power_cycle_max
        self._lifetime_min = lifetime_min
        self._lifetime_max = lifetime_max
        self._op_limit_min = op_limit_min
        self._op_limit_max = op_limit_max
        self._limit_min = limit_min
        self._limit_max = limit_max

    @classmethod
    def from_dict(cls, dikt) -> 'SmartSsdTemperature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmartSsd_temperature of this SmartSsdTemperature.  # noqa: E501
        :rtype: SmartSsdTemperature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current(self) -> int:
        """Gets the current of this SmartSsdTemperature.


        :return: The current of this SmartSsdTemperature.
        :rtype: int
        """
        return self._current

    @current.setter
    def current(self, current: int):
        """Sets the current of this SmartSsdTemperature.


        :param current: The current of this SmartSsdTemperature.
        :type current: int
        """

        self._current = current

    @property
    def power_cycle_min(self) -> int:
        """Gets the power_cycle_min of this SmartSsdTemperature.


        :return: The power_cycle_min of this SmartSsdTemperature.
        :rtype: int
        """
        return self._power_cycle_min

    @power_cycle_min.setter
    def power_cycle_min(self, power_cycle_min: int):
        """Sets the power_cycle_min of this SmartSsdTemperature.


        :param power_cycle_min: The power_cycle_min of this SmartSsdTemperature.
        :type power_cycle_min: int
        """

        self._power_cycle_min = power_cycle_min

    @property
    def power_cycle_max(self) -> int:
        """Gets the power_cycle_max of this SmartSsdTemperature.


        :return: The power_cycle_max of this SmartSsdTemperature.
        :rtype: int
        """
        return self._power_cycle_max

    @power_cycle_max.setter
    def power_cycle_max(self, power_cycle_max: int):
        """Sets the power_cycle_max of this SmartSsdTemperature.


        :param power_cycle_max: The power_cycle_max of this SmartSsdTemperature.
        :type power_cycle_max: int
        """

        self._power_cycle_max = power_cycle_max

    @property
    def lifetime_min(self) -> int:
        """Gets the lifetime_min of this SmartSsdTemperature.


        :return: The lifetime_min of this SmartSsdTemperature.
        :rtype: int
        """
        return self._lifetime_min

    @lifetime_min.setter
    def lifetime_min(self, lifetime_min: int):
        """Sets the lifetime_min of this SmartSsdTemperature.


        :param lifetime_min: The lifetime_min of this SmartSsdTemperature.
        :type lifetime_min: int
        """

        self._lifetime_min = lifetime_min

    @property
    def lifetime_max(self) -> int:
        """Gets the lifetime_max of this SmartSsdTemperature.


        :return: The lifetime_max of this SmartSsdTemperature.
        :rtype: int
        """
        return self._lifetime_max

    @lifetime_max.setter
    def lifetime_max(self, lifetime_max: int):
        """Sets the lifetime_max of this SmartSsdTemperature.


        :param lifetime_max: The lifetime_max of this SmartSsdTemperature.
        :type lifetime_max: int
        """

        self._lifetime_max = lifetime_max

    @property
    def op_limit_min(self) -> int:
        """Gets the op_limit_min of this SmartSsdTemperature.


        :return: The op_limit_min of this SmartSsdTemperature.
        :rtype: int
        """
        return self._op_limit_min

    @op_limit_min.setter
    def op_limit_min(self, op_limit_min: int):
        """Sets the op_limit_min of this SmartSsdTemperature.


        :param op_limit_min: The op_limit_min of this SmartSsdTemperature.
        :type op_limit_min: int
        """

        self._op_limit_min = op_limit_min

    @property
    def op_limit_max(self) -> int:
        """Gets the op_limit_max of this SmartSsdTemperature.


        :return: The op_limit_max of this SmartSsdTemperature.
        :rtype: int
        """
        return self._op_limit_max

    @op_limit_max.setter
    def op_limit_max(self, op_limit_max: int):
        """Sets the op_limit_max of this SmartSsdTemperature.


        :param op_limit_max: The op_limit_max of this SmartSsdTemperature.
        :type op_limit_max: int
        """

        self._op_limit_max = op_limit_max

    @property
    def limit_min(self) -> int:
        """Gets the limit_min of this SmartSsdTemperature.


        :return: The limit_min of this SmartSsdTemperature.
        :rtype: int
        """
        return self._limit_min

    @limit_min.setter
    def limit_min(self, limit_min: int):
        """Sets the limit_min of this SmartSsdTemperature.


        :param limit_min: The limit_min of this SmartSsdTemperature.
        :type limit_min: int
        """

        self._limit_min = limit_min

    @property
    def limit_max(self) -> int:
        """Gets the limit_max of this SmartSsdTemperature.


        :return: The limit_max of this SmartSsdTemperature.
        :rtype: int
        """
        return self._limit_max

    @limit_max.setter
    def limit_max(self, limit_max: int):
        """Sets the limit_max of this SmartSsdTemperature.


        :param limit_max: The limit_max of this SmartSsdTemperature.
        :type limit_max: int
        """

        self._limit_max = limit_max
