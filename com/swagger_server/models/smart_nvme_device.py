# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SmartNvmeDevice(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, info_name: str=None, type: str=None, protocol: str=None):  # noqa: E501
        """SmartNvmeDevice - a model defined in Swagger

        :param name: The name of this SmartNvmeDevice.  # noqa: E501
        :type name: str
        :param info_name: The info_name of this SmartNvmeDevice.  # noqa: E501
        :type info_name: str
        :param type: The type of this SmartNvmeDevice.  # noqa: E501
        :type type: str
        :param protocol: The protocol of this SmartNvmeDevice.  # noqa: E501
        :type protocol: str
        """
        self.swagger_types = {
            'name': str,
            'info_name': str,
            'type': str,
            'protocol': str
        }

        self.attribute_map = {
            'name': 'name',
            'info_name': 'info_name',
            'type': 'type',
            'protocol': 'protocol'
        }

        self._name = name
        self._info_name = info_name
        self._type = type
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt) -> 'SmartNvmeDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmartNvme_device of this SmartNvmeDevice.  # noqa: E501
        :rtype: SmartNvmeDevice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this SmartNvmeDevice.


        :return: The name of this SmartNvmeDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SmartNvmeDevice.


        :param name: The name of this SmartNvmeDevice.
        :type name: str
        """

        self._name = name

    @property
    def info_name(self) -> str:
        """Gets the info_name of this SmartNvmeDevice.


        :return: The info_name of this SmartNvmeDevice.
        :rtype: str
        """
        return self._info_name

    @info_name.setter
    def info_name(self, info_name: str):
        """Sets the info_name of this SmartNvmeDevice.


        :param info_name: The info_name of this SmartNvmeDevice.
        :type info_name: str
        """

        self._info_name = info_name

    @property
    def type(self) -> str:
        """Gets the type of this SmartNvmeDevice.


        :return: The type of this SmartNvmeDevice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this SmartNvmeDevice.


        :param type: The type of this SmartNvmeDevice.
        :type type: str
        """

        self._type = type

    @property
    def protocol(self) -> str:
        """Gets the protocol of this SmartNvmeDevice.


        :return: The protocol of this SmartNvmeDevice.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this SmartNvmeDevice.


        :param protocol: The protocol of this SmartNvmeDevice.
        :type protocol: str
        """

        self._protocol = protocol
