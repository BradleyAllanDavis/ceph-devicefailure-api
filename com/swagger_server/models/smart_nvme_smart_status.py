# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.smart_nvme_smart_status_nvme import SmartNvmeSmartStatusNvme  # noqa: F401,E501
from swagger_server import util


class SmartNvmeSmartStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, passed: bool=None, nvme: SmartNvmeSmartStatusNvme=None):  # noqa: E501
        """SmartNvmeSmartStatus - a model defined in Swagger

        :param passed: The passed of this SmartNvmeSmartStatus.  # noqa: E501
        :type passed: bool
        :param nvme: The nvme of this SmartNvmeSmartStatus.  # noqa: E501
        :type nvme: SmartNvmeSmartStatusNvme
        """
        self.swagger_types = {
            'passed': bool,
            'nvme': SmartNvmeSmartStatusNvme
        }

        self.attribute_map = {
            'passed': 'passed',
            'nvme': 'nvme'
        }

        self._passed = passed
        self._nvme = nvme

    @classmethod
    def from_dict(cls, dikt) -> 'SmartNvmeSmartStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmartNvme_smart_status of this SmartNvmeSmartStatus.  # noqa: E501
        :rtype: SmartNvmeSmartStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def passed(self) -> bool:
        """Gets the passed of this SmartNvmeSmartStatus.


        :return: The passed of this SmartNvmeSmartStatus.
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed: bool):
        """Sets the passed of this SmartNvmeSmartStatus.


        :param passed: The passed of this SmartNvmeSmartStatus.
        :type passed: bool
        """

        self._passed = passed

    @property
    def nvme(self) -> SmartNvmeSmartStatusNvme:
        """Gets the nvme of this SmartNvmeSmartStatus.


        :return: The nvme of this SmartNvmeSmartStatus.
        :rtype: SmartNvmeSmartStatusNvme
        """
        return self._nvme

    @nvme.setter
    def nvme(self, nvme: SmartNvmeSmartStatusNvme):
        """Sets the nvme of this SmartNvmeSmartStatus.


        :param nvme: The nvme of this SmartNvmeSmartStatus.
        :type nvme: SmartNvmeSmartStatusNvme
        """

        self._nvme = nvme
