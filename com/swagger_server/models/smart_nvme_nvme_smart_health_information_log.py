# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SmartNvmeNvmeSmartHealthInformationLog(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, critical_warning: int=None, temperature: int=None, available_spare: int=None, available_spare_threshold: int=None, percentage_used: int=None, data_units_read: int=None, data_units_written: int=None, host_reads: int=None, host_writes: int=None, controller_busy_time: int=None, power_cycles: int=None, power_on_hours: int=None, unsafe_shutdowns: int=None, media_errors: int=None, num_err_log_entries: int=None, warning_temp_time: int=None, critical_comp_time: int=None):  # noqa: E501
        """SmartNvmeNvmeSmartHealthInformationLog - a model defined in Swagger

        :param critical_warning: The critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type critical_warning: int
        :param temperature: The temperature of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type temperature: int
        :param available_spare: The available_spare of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type available_spare: int
        :param available_spare_threshold: The available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type available_spare_threshold: int
        :param percentage_used: The percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type percentage_used: int
        :param data_units_read: The data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type data_units_read: int
        :param data_units_written: The data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type data_units_written: int
        :param host_reads: The host_reads of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type host_reads: int
        :param host_writes: The host_writes of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type host_writes: int
        :param controller_busy_time: The controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type controller_busy_time: int
        :param power_cycles: The power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type power_cycles: int
        :param power_on_hours: The power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type power_on_hours: int
        :param unsafe_shutdowns: The unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type unsafe_shutdowns: int
        :param media_errors: The media_errors of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type media_errors: int
        :param num_err_log_entries: The num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type num_err_log_entries: int
        :param warning_temp_time: The warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type warning_temp_time: int
        :param critical_comp_time: The critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type critical_comp_time: int
        """
        self.swagger_types = {
            'critical_warning': int,
            'temperature': int,
            'available_spare': int,
            'available_spare_threshold': int,
            'percentage_used': int,
            'data_units_read': int,
            'data_units_written': int,
            'host_reads': int,
            'host_writes': int,
            'controller_busy_time': int,
            'power_cycles': int,
            'power_on_hours': int,
            'unsafe_shutdowns': int,
            'media_errors': int,
            'num_err_log_entries': int,
            'warning_temp_time': int,
            'critical_comp_time': int
        }

        self.attribute_map = {
            'critical_warning': 'critical_warning',
            'temperature': 'temperature',
            'available_spare': 'available_spare',
            'available_spare_threshold': 'available_spare_threshold',
            'percentage_used': 'percentage_used',
            'data_units_read': 'data_units_read',
            'data_units_written': 'data_units_written',
            'host_reads': 'host_reads',
            'host_writes': 'host_writes',
            'controller_busy_time': 'controller_busy_time',
            'power_cycles': 'power_cycles',
            'power_on_hours': 'power_on_hours',
            'unsafe_shutdowns': 'unsafe_shutdowns',
            'media_errors': 'media_errors',
            'num_err_log_entries': 'num_err_log_entries',
            'warning_temp_time': 'warning_temp_time',
            'critical_comp_time': 'critical_comp_time'
        }

        self._critical_warning = critical_warning
        self._temperature = temperature
        self._available_spare = available_spare
        self._available_spare_threshold = available_spare_threshold
        self._percentage_used = percentage_used
        self._data_units_read = data_units_read
        self._data_units_written = data_units_written
        self._host_reads = host_reads
        self._host_writes = host_writes
        self._controller_busy_time = controller_busy_time
        self._power_cycles = power_cycles
        self._power_on_hours = power_on_hours
        self._unsafe_shutdowns = unsafe_shutdowns
        self._media_errors = media_errors
        self._num_err_log_entries = num_err_log_entries
        self._warning_temp_time = warning_temp_time
        self._critical_comp_time = critical_comp_time

    @classmethod
    def from_dict(cls, dikt) -> 'SmartNvmeNvmeSmartHealthInformationLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmartNvme_nvme_smart_health_information_log of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: SmartNvmeNvmeSmartHealthInformationLog
        """
        return util.deserialize_model(dikt, cls)

    @property
    def critical_warning(self) -> int:
        """Gets the critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._critical_warning

    @critical_warning.setter
    def critical_warning(self, critical_warning: int):
        """Sets the critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.


        :param critical_warning: The critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.
        :type critical_warning: int
        """

        self._critical_warning = critical_warning

    @property
    def temperature(self) -> int:
        """Gets the temperature of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The temperature of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: int):
        """Sets the temperature of this SmartNvmeNvmeSmartHealthInformationLog.


        :param temperature: The temperature of this SmartNvmeNvmeSmartHealthInformationLog.
        :type temperature: int
        """

        self._temperature = temperature

    @property
    def available_spare(self) -> int:
        """Gets the available_spare of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The available_spare of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._available_spare

    @available_spare.setter
    def available_spare(self, available_spare: int):
        """Sets the available_spare of this SmartNvmeNvmeSmartHealthInformationLog.


        :param available_spare: The available_spare of this SmartNvmeNvmeSmartHealthInformationLog.
        :type available_spare: int
        """

        self._available_spare = available_spare

    @property
    def available_spare_threshold(self) -> int:
        """Gets the available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._available_spare_threshold

    @available_spare_threshold.setter
    def available_spare_threshold(self, available_spare_threshold: int):
        """Sets the available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.


        :param available_spare_threshold: The available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.
        :type available_spare_threshold: int
        """

        self._available_spare_threshold = available_spare_threshold

    @property
    def percentage_used(self) -> int:
        """Gets the percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._percentage_used

    @percentage_used.setter
    def percentage_used(self, percentage_used: int):
        """Sets the percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.


        :param percentage_used: The percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.
        :type percentage_used: int
        """

        self._percentage_used = percentage_used

    @property
    def data_units_read(self) -> int:
        """Gets the data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._data_units_read

    @data_units_read.setter
    def data_units_read(self, data_units_read: int):
        """Sets the data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.


        :param data_units_read: The data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.
        :type data_units_read: int
        """

        self._data_units_read = data_units_read

    @property
    def data_units_written(self) -> int:
        """Gets the data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._data_units_written

    @data_units_written.setter
    def data_units_written(self, data_units_written: int):
        """Sets the data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.


        :param data_units_written: The data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.
        :type data_units_written: int
        """

        self._data_units_written = data_units_written

    @property
    def host_reads(self) -> int:
        """Gets the host_reads of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The host_reads of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._host_reads

    @host_reads.setter
    def host_reads(self, host_reads: int):
        """Sets the host_reads of this SmartNvmeNvmeSmartHealthInformationLog.


        :param host_reads: The host_reads of this SmartNvmeNvmeSmartHealthInformationLog.
        :type host_reads: int
        """

        self._host_reads = host_reads

    @property
    def host_writes(self) -> int:
        """Gets the host_writes of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The host_writes of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._host_writes

    @host_writes.setter
    def host_writes(self, host_writes: int):
        """Sets the host_writes of this SmartNvmeNvmeSmartHealthInformationLog.


        :param host_writes: The host_writes of this SmartNvmeNvmeSmartHealthInformationLog.
        :type host_writes: int
        """

        self._host_writes = host_writes

    @property
    def controller_busy_time(self) -> int:
        """Gets the controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._controller_busy_time

    @controller_busy_time.setter
    def controller_busy_time(self, controller_busy_time: int):
        """Sets the controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :param controller_busy_time: The controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.
        :type controller_busy_time: int
        """

        self._controller_busy_time = controller_busy_time

    @property
    def power_cycles(self) -> int:
        """Gets the power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._power_cycles

    @power_cycles.setter
    def power_cycles(self, power_cycles: int):
        """Sets the power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.


        :param power_cycles: The power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.
        :type power_cycles: int
        """

        self._power_cycles = power_cycles

    @property
    def power_on_hours(self) -> int:
        """Gets the power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._power_on_hours

    @power_on_hours.setter
    def power_on_hours(self, power_on_hours: int):
        """Sets the power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.


        :param power_on_hours: The power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.
        :type power_on_hours: int
        """

        self._power_on_hours = power_on_hours

    @property
    def unsafe_shutdowns(self) -> int:
        """Gets the unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._unsafe_shutdowns

    @unsafe_shutdowns.setter
    def unsafe_shutdowns(self, unsafe_shutdowns: int):
        """Sets the unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.


        :param unsafe_shutdowns: The unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.
        :type unsafe_shutdowns: int
        """

        self._unsafe_shutdowns = unsafe_shutdowns

    @property
    def media_errors(self) -> int:
        """Gets the media_errors of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The media_errors of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._media_errors

    @media_errors.setter
    def media_errors(self, media_errors: int):
        """Sets the media_errors of this SmartNvmeNvmeSmartHealthInformationLog.


        :param media_errors: The media_errors of this SmartNvmeNvmeSmartHealthInformationLog.
        :type media_errors: int
        """

        self._media_errors = media_errors

    @property
    def num_err_log_entries(self) -> int:
        """Gets the num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._num_err_log_entries

    @num_err_log_entries.setter
    def num_err_log_entries(self, num_err_log_entries: int):
        """Sets the num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.


        :param num_err_log_entries: The num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.
        :type num_err_log_entries: int
        """

        self._num_err_log_entries = num_err_log_entries

    @property
    def warning_temp_time(self) -> int:
        """Gets the warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._warning_temp_time

    @warning_temp_time.setter
    def warning_temp_time(self, warning_temp_time: int):
        """Sets the warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :param warning_temp_time: The warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.
        :type warning_temp_time: int
        """

        self._warning_temp_time = warning_temp_time

    @property
    def critical_comp_time(self) -> int:
        """Gets the critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :return: The critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.
        :rtype: int
        """
        return self._critical_comp_time

    @critical_comp_time.setter
    def critical_comp_time(self, critical_comp_time: int):
        """Sets the critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :param critical_comp_time: The critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.
        :type critical_comp_time: int
        """

        self._critical_comp_time = critical_comp_time
