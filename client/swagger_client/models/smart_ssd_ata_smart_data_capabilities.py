# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmartSsdAtaSmartDataCapabilities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'values': 'list[int]',
        'exec_offline_immediate_supported': 'bool',
        'offline_is_aborted_upon_new_cmd': 'bool',
        'offline_surface_scan_supported': 'bool',
        'self_tests_supported': 'bool',
        'conveyance_self_test_supported': 'bool',
        'selective_self_test_supported': 'bool',
        'attribute_autosave_enabled': 'bool',
        'error_logging_supported': 'bool',
        'gp_logging_supported': 'bool'
    }

    attribute_map = {
        'values': 'values',
        'exec_offline_immediate_supported': 'exec_offline_immediate_supported',
        'offline_is_aborted_upon_new_cmd': 'offline_is_aborted_upon_new_cmd',
        'offline_surface_scan_supported': 'offline_surface_scan_supported',
        'self_tests_supported': 'self_tests_supported',
        'conveyance_self_test_supported': 'conveyance_self_test_supported',
        'selective_self_test_supported': 'selective_self_test_supported',
        'attribute_autosave_enabled': 'attribute_autosave_enabled',
        'error_logging_supported': 'error_logging_supported',
        'gp_logging_supported': 'gp_logging_supported'
    }

    def __init__(self, values=None, exec_offline_immediate_supported=None, offline_is_aborted_upon_new_cmd=None, offline_surface_scan_supported=None, self_tests_supported=None, conveyance_self_test_supported=None, selective_self_test_supported=None, attribute_autosave_enabled=None, error_logging_supported=None, gp_logging_supported=None):  # noqa: E501
        """SmartSsdAtaSmartDataCapabilities - a model defined in Swagger"""  # noqa: E501

        self._values = None
        self._exec_offline_immediate_supported = None
        self._offline_is_aborted_upon_new_cmd = None
        self._offline_surface_scan_supported = None
        self._self_tests_supported = None
        self._conveyance_self_test_supported = None
        self._selective_self_test_supported = None
        self._attribute_autosave_enabled = None
        self._error_logging_supported = None
        self._gp_logging_supported = None
        self.discriminator = None

        if values is not None:
            self.values = values
        if exec_offline_immediate_supported is not None:
            self.exec_offline_immediate_supported = exec_offline_immediate_supported
        if offline_is_aborted_upon_new_cmd is not None:
            self.offline_is_aborted_upon_new_cmd = offline_is_aborted_upon_new_cmd
        if offline_surface_scan_supported is not None:
            self.offline_surface_scan_supported = offline_surface_scan_supported
        if self_tests_supported is not None:
            self.self_tests_supported = self_tests_supported
        if conveyance_self_test_supported is not None:
            self.conveyance_self_test_supported = conveyance_self_test_supported
        if selective_self_test_supported is not None:
            self.selective_self_test_supported = selective_self_test_supported
        if attribute_autosave_enabled is not None:
            self.attribute_autosave_enabled = attribute_autosave_enabled
        if error_logging_supported is not None:
            self.error_logging_supported = error_logging_supported
        if gp_logging_supported is not None:
            self.gp_logging_supported = gp_logging_supported

    @property
    def values(self):
        """Gets the values of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The values of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: list[int]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SmartSsdAtaSmartDataCapabilities.


        :param values: The values of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: list[int]
        """

        self._values = values

    @property
    def exec_offline_immediate_supported(self):
        """Gets the exec_offline_immediate_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The exec_offline_immediate_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._exec_offline_immediate_supported

    @exec_offline_immediate_supported.setter
    def exec_offline_immediate_supported(self, exec_offline_immediate_supported):
        """Sets the exec_offline_immediate_supported of this SmartSsdAtaSmartDataCapabilities.


        :param exec_offline_immediate_supported: The exec_offline_immediate_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._exec_offline_immediate_supported = exec_offline_immediate_supported

    @property
    def offline_is_aborted_upon_new_cmd(self):
        """Gets the offline_is_aborted_upon_new_cmd of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The offline_is_aborted_upon_new_cmd of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._offline_is_aborted_upon_new_cmd

    @offline_is_aborted_upon_new_cmd.setter
    def offline_is_aborted_upon_new_cmd(self, offline_is_aborted_upon_new_cmd):
        """Sets the offline_is_aborted_upon_new_cmd of this SmartSsdAtaSmartDataCapabilities.


        :param offline_is_aborted_upon_new_cmd: The offline_is_aborted_upon_new_cmd of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._offline_is_aborted_upon_new_cmd = offline_is_aborted_upon_new_cmd

    @property
    def offline_surface_scan_supported(self):
        """Gets the offline_surface_scan_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The offline_surface_scan_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._offline_surface_scan_supported

    @offline_surface_scan_supported.setter
    def offline_surface_scan_supported(self, offline_surface_scan_supported):
        """Sets the offline_surface_scan_supported of this SmartSsdAtaSmartDataCapabilities.


        :param offline_surface_scan_supported: The offline_surface_scan_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._offline_surface_scan_supported = offline_surface_scan_supported

    @property
    def self_tests_supported(self):
        """Gets the self_tests_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The self_tests_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._self_tests_supported

    @self_tests_supported.setter
    def self_tests_supported(self, self_tests_supported):
        """Sets the self_tests_supported of this SmartSsdAtaSmartDataCapabilities.


        :param self_tests_supported: The self_tests_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._self_tests_supported = self_tests_supported

    @property
    def conveyance_self_test_supported(self):
        """Gets the conveyance_self_test_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The conveyance_self_test_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._conveyance_self_test_supported

    @conveyance_self_test_supported.setter
    def conveyance_self_test_supported(self, conveyance_self_test_supported):
        """Sets the conveyance_self_test_supported of this SmartSsdAtaSmartDataCapabilities.


        :param conveyance_self_test_supported: The conveyance_self_test_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._conveyance_self_test_supported = conveyance_self_test_supported

    @property
    def selective_self_test_supported(self):
        """Gets the selective_self_test_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The selective_self_test_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._selective_self_test_supported

    @selective_self_test_supported.setter
    def selective_self_test_supported(self, selective_self_test_supported):
        """Sets the selective_self_test_supported of this SmartSsdAtaSmartDataCapabilities.


        :param selective_self_test_supported: The selective_self_test_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._selective_self_test_supported = selective_self_test_supported

    @property
    def attribute_autosave_enabled(self):
        """Gets the attribute_autosave_enabled of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The attribute_autosave_enabled of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._attribute_autosave_enabled

    @attribute_autosave_enabled.setter
    def attribute_autosave_enabled(self, attribute_autosave_enabled):
        """Sets the attribute_autosave_enabled of this SmartSsdAtaSmartDataCapabilities.


        :param attribute_autosave_enabled: The attribute_autosave_enabled of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._attribute_autosave_enabled = attribute_autosave_enabled

    @property
    def error_logging_supported(self):
        """Gets the error_logging_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The error_logging_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._error_logging_supported

    @error_logging_supported.setter
    def error_logging_supported(self, error_logging_supported):
        """Sets the error_logging_supported of this SmartSsdAtaSmartDataCapabilities.


        :param error_logging_supported: The error_logging_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._error_logging_supported = error_logging_supported

    @property
    def gp_logging_supported(self):
        """Gets the gp_logging_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501


        :return: The gp_logging_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._gp_logging_supported

    @gp_logging_supported.setter
    def gp_logging_supported(self, gp_logging_supported):
        """Sets the gp_logging_supported of this SmartSsdAtaSmartDataCapabilities.


        :param gp_logging_supported: The gp_logging_supported of this SmartSsdAtaSmartDataCapabilities.  # noqa: E501
        :type: bool
        """

        self._gp_logging_supported = gp_logging_supported

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartSsdAtaSmartDataCapabilities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
