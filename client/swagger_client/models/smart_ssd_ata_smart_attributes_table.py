# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.smart_ssd_ata_smart_attributes_flags import SmartSsdAtaSmartAttributesFlags  # noqa: F401,E501
from swagger_client.models.smart_ssd_ata_smart_data_offline_data_collection_status import SmartSsdAtaSmartDataOfflineDataCollectionStatus  # noqa: F401,E501


class SmartSsdAtaSmartAttributesTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'value': 'int',
        'worst': 'int',
        'thresh': 'int',
        'when_failed': 'str',
        'flags': 'SmartSsdAtaSmartAttributesFlags',
        'raw': 'SmartSsdAtaSmartDataOfflineDataCollectionStatus'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'value': 'value',
        'worst': 'worst',
        'thresh': 'thresh',
        'when_failed': 'when_failed',
        'flags': 'flags',
        'raw': 'raw'
    }

    def __init__(self, id=None, name=None, value=None, worst=None, thresh=None, when_failed=None, flags=None, raw=None):  # noqa: E501
        """SmartSsdAtaSmartAttributesTable - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._value = None
        self._worst = None
        self._thresh = None
        self._when_failed = None
        self._flags = None
        self._raw = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if worst is not None:
            self.worst = worst
        if thresh is not None:
            self.thresh = thresh
        if when_failed is not None:
            self.when_failed = when_failed
        if flags is not None:
            self.flags = flags
        if raw is not None:
            self.raw = raw

    @property
    def id(self):
        """Gets the id of this SmartSsdAtaSmartAttributesTable.  # noqa: E501


        :return: The id of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SmartSsdAtaSmartAttributesTable.


        :param id: The id of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SmartSsdAtaSmartAttributesTable.  # noqa: E501


        :return: The name of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SmartSsdAtaSmartAttributesTable.


        :param name: The name of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this SmartSsdAtaSmartAttributesTable.  # noqa: E501


        :return: The value of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SmartSsdAtaSmartAttributesTable.


        :param value: The value of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def worst(self):
        """Gets the worst of this SmartSsdAtaSmartAttributesTable.  # noqa: E501


        :return: The worst of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :rtype: int
        """
        return self._worst

    @worst.setter
    def worst(self, worst):
        """Sets the worst of this SmartSsdAtaSmartAttributesTable.


        :param worst: The worst of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :type: int
        """

        self._worst = worst

    @property
    def thresh(self):
        """Gets the thresh of this SmartSsdAtaSmartAttributesTable.  # noqa: E501


        :return: The thresh of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :rtype: int
        """
        return self._thresh

    @thresh.setter
    def thresh(self, thresh):
        """Sets the thresh of this SmartSsdAtaSmartAttributesTable.


        :param thresh: The thresh of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :type: int
        """

        self._thresh = thresh

    @property
    def when_failed(self):
        """Gets the when_failed of this SmartSsdAtaSmartAttributesTable.  # noqa: E501


        :return: The when_failed of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :rtype: str
        """
        return self._when_failed

    @when_failed.setter
    def when_failed(self, when_failed):
        """Sets the when_failed of this SmartSsdAtaSmartAttributesTable.


        :param when_failed: The when_failed of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :type: str
        """

        self._when_failed = when_failed

    @property
    def flags(self):
        """Gets the flags of this SmartSsdAtaSmartAttributesTable.  # noqa: E501


        :return: The flags of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :rtype: SmartSsdAtaSmartAttributesFlags
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this SmartSsdAtaSmartAttributesTable.


        :param flags: The flags of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :type: SmartSsdAtaSmartAttributesFlags
        """

        self._flags = flags

    @property
    def raw(self):
        """Gets the raw of this SmartSsdAtaSmartAttributesTable.  # noqa: E501


        :return: The raw of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :rtype: SmartSsdAtaSmartDataOfflineDataCollectionStatus
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this SmartSsdAtaSmartAttributesTable.


        :param raw: The raw of this SmartSsdAtaSmartAttributesTable.  # noqa: E501
        :type: SmartSsdAtaSmartDataOfflineDataCollectionStatus
        """

        self._raw = raw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartSsdAtaSmartAttributesTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
