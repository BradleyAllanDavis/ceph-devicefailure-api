# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmartSsdAtaSctStatusTemperature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current': 'int',
        'power_cycle_min': 'int',
        'power_cycle_max': 'int',
        'lifetime_min': 'int',
        'lifetime_max': 'int',
        'under_limit_count': 'int',
        'over_limit_count': 'int'
    }

    attribute_map = {
        'current': 'current',
        'power_cycle_min': 'power_cycle_min',
        'power_cycle_max': 'power_cycle_max',
        'lifetime_min': 'lifetime_min',
        'lifetime_max': 'lifetime_max',
        'under_limit_count': 'under_limit_count',
        'over_limit_count': 'over_limit_count'
    }

    def __init__(self, current=None, power_cycle_min=None, power_cycle_max=None, lifetime_min=None, lifetime_max=None, under_limit_count=None, over_limit_count=None):  # noqa: E501
        """SmartSsdAtaSctStatusTemperature - a model defined in Swagger"""  # noqa: E501

        self._current = None
        self._power_cycle_min = None
        self._power_cycle_max = None
        self._lifetime_min = None
        self._lifetime_max = None
        self._under_limit_count = None
        self._over_limit_count = None
        self.discriminator = None

        if current is not None:
            self.current = current
        if power_cycle_min is not None:
            self.power_cycle_min = power_cycle_min
        if power_cycle_max is not None:
            self.power_cycle_max = power_cycle_max
        if lifetime_min is not None:
            self.lifetime_min = lifetime_min
        if lifetime_max is not None:
            self.lifetime_max = lifetime_max
        if under_limit_count is not None:
            self.under_limit_count = under_limit_count
        if over_limit_count is not None:
            self.over_limit_count = over_limit_count

    @property
    def current(self):
        """Gets the current of this SmartSsdAtaSctStatusTemperature.  # noqa: E501


        :return: The current of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :rtype: int
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this SmartSsdAtaSctStatusTemperature.


        :param current: The current of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type: int
        """

        self._current = current

    @property
    def power_cycle_min(self):
        """Gets the power_cycle_min of this SmartSsdAtaSctStatusTemperature.  # noqa: E501


        :return: The power_cycle_min of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :rtype: int
        """
        return self._power_cycle_min

    @power_cycle_min.setter
    def power_cycle_min(self, power_cycle_min):
        """Sets the power_cycle_min of this SmartSsdAtaSctStatusTemperature.


        :param power_cycle_min: The power_cycle_min of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type: int
        """

        self._power_cycle_min = power_cycle_min

    @property
    def power_cycle_max(self):
        """Gets the power_cycle_max of this SmartSsdAtaSctStatusTemperature.  # noqa: E501


        :return: The power_cycle_max of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :rtype: int
        """
        return self._power_cycle_max

    @power_cycle_max.setter
    def power_cycle_max(self, power_cycle_max):
        """Sets the power_cycle_max of this SmartSsdAtaSctStatusTemperature.


        :param power_cycle_max: The power_cycle_max of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type: int
        """

        self._power_cycle_max = power_cycle_max

    @property
    def lifetime_min(self):
        """Gets the lifetime_min of this SmartSsdAtaSctStatusTemperature.  # noqa: E501


        :return: The lifetime_min of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :rtype: int
        """
        return self._lifetime_min

    @lifetime_min.setter
    def lifetime_min(self, lifetime_min):
        """Sets the lifetime_min of this SmartSsdAtaSctStatusTemperature.


        :param lifetime_min: The lifetime_min of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type: int
        """

        self._lifetime_min = lifetime_min

    @property
    def lifetime_max(self):
        """Gets the lifetime_max of this SmartSsdAtaSctStatusTemperature.  # noqa: E501


        :return: The lifetime_max of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :rtype: int
        """
        return self._lifetime_max

    @lifetime_max.setter
    def lifetime_max(self, lifetime_max):
        """Sets the lifetime_max of this SmartSsdAtaSctStatusTemperature.


        :param lifetime_max: The lifetime_max of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type: int
        """

        self._lifetime_max = lifetime_max

    @property
    def under_limit_count(self):
        """Gets the under_limit_count of this SmartSsdAtaSctStatusTemperature.  # noqa: E501


        :return: The under_limit_count of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :rtype: int
        """
        return self._under_limit_count

    @under_limit_count.setter
    def under_limit_count(self, under_limit_count):
        """Sets the under_limit_count of this SmartSsdAtaSctStatusTemperature.


        :param under_limit_count: The under_limit_count of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type: int
        """

        self._under_limit_count = under_limit_count

    @property
    def over_limit_count(self):
        """Gets the over_limit_count of this SmartSsdAtaSctStatusTemperature.  # noqa: E501


        :return: The over_limit_count of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :rtype: int
        """
        return self._over_limit_count

    @over_limit_count.setter
    def over_limit_count(self, over_limit_count):
        """Sets the over_limit_count of this SmartSsdAtaSctStatusTemperature.


        :param over_limit_count: The over_limit_count of this SmartSsdAtaSctStatusTemperature.  # noqa: E501
        :type: int
        """

        self._over_limit_count = over_limit_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartSsdAtaSctStatusTemperature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
