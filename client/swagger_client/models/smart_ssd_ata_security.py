# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmartSsdAtaSecurity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'int',
        'string': 'str',
        'enabled': 'bool',
        'frozen': 'bool'
    }

    attribute_map = {
        'state': 'state',
        'string': 'string',
        'enabled': 'enabled',
        'frozen': 'frozen'
    }

    def __init__(self, state=None, string=None, enabled=None, frozen=None):  # noqa: E501
        """SmartSsdAtaSecurity - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._string = None
        self._enabled = None
        self._frozen = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if string is not None:
            self.string = string
        if enabled is not None:
            self.enabled = enabled
        if frozen is not None:
            self.frozen = frozen

    @property
    def state(self):
        """Gets the state of this SmartSsdAtaSecurity.  # noqa: E501


        :return: The state of this SmartSsdAtaSecurity.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SmartSsdAtaSecurity.


        :param state: The state of this SmartSsdAtaSecurity.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def string(self):
        """Gets the string of this SmartSsdAtaSecurity.  # noqa: E501


        :return: The string of this SmartSsdAtaSecurity.  # noqa: E501
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this SmartSsdAtaSecurity.


        :param string: The string of this SmartSsdAtaSecurity.  # noqa: E501
        :type: str
        """

        self._string = string

    @property
    def enabled(self):
        """Gets the enabled of this SmartSsdAtaSecurity.  # noqa: E501


        :return: The enabled of this SmartSsdAtaSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SmartSsdAtaSecurity.


        :param enabled: The enabled of this SmartSsdAtaSecurity.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def frozen(self):
        """Gets the frozen of this SmartSsdAtaSecurity.  # noqa: E501


        :return: The frozen of this SmartSsdAtaSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._frozen

    @frozen.setter
    def frozen(self, frozen):
        """Sets the frozen of this SmartSsdAtaSecurity.


        :param frozen: The frozen of this SmartSsdAtaSecurity.  # noqa: E501
        :type: bool
        """

        self._frozen = frozen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartSsdAtaSecurity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
