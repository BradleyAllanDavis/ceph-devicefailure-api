# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.smart_ssd_ata_smart_data_capabilities import SmartSsdAtaSmartDataCapabilities  # noqa: F401,E501
from swagger_client.models.smart_ssd_ata_smart_data_offline_data_collection import SmartSsdAtaSmartDataOfflineDataCollection  # noqa: F401,E501
from swagger_client.models.smart_ssd_ata_smart_data_self_test import SmartSsdAtaSmartDataSelfTest  # noqa: F401,E501


class SmartSsdAtaSmartData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offline_data_collection': 'SmartSsdAtaSmartDataOfflineDataCollection',
        'self_test': 'SmartSsdAtaSmartDataSelfTest',
        'capabilities': 'SmartSsdAtaSmartDataCapabilities'
    }

    attribute_map = {
        'offline_data_collection': 'offline_data_collection',
        'self_test': 'self_test',
        'capabilities': 'capabilities'
    }

    def __init__(self, offline_data_collection=None, self_test=None, capabilities=None):  # noqa: E501
        """SmartSsdAtaSmartData - a model defined in Swagger"""  # noqa: E501

        self._offline_data_collection = None
        self._self_test = None
        self._capabilities = None
        self.discriminator = None

        if offline_data_collection is not None:
            self.offline_data_collection = offline_data_collection
        if self_test is not None:
            self.self_test = self_test
        if capabilities is not None:
            self.capabilities = capabilities

    @property
    def offline_data_collection(self):
        """Gets the offline_data_collection of this SmartSsdAtaSmartData.  # noqa: E501


        :return: The offline_data_collection of this SmartSsdAtaSmartData.  # noqa: E501
        :rtype: SmartSsdAtaSmartDataOfflineDataCollection
        """
        return self._offline_data_collection

    @offline_data_collection.setter
    def offline_data_collection(self, offline_data_collection):
        """Sets the offline_data_collection of this SmartSsdAtaSmartData.


        :param offline_data_collection: The offline_data_collection of this SmartSsdAtaSmartData.  # noqa: E501
        :type: SmartSsdAtaSmartDataOfflineDataCollection
        """

        self._offline_data_collection = offline_data_collection

    @property
    def self_test(self):
        """Gets the self_test of this SmartSsdAtaSmartData.  # noqa: E501


        :return: The self_test of this SmartSsdAtaSmartData.  # noqa: E501
        :rtype: SmartSsdAtaSmartDataSelfTest
        """
        return self._self_test

    @self_test.setter
    def self_test(self, self_test):
        """Sets the self_test of this SmartSsdAtaSmartData.


        :param self_test: The self_test of this SmartSsdAtaSmartData.  # noqa: E501
        :type: SmartSsdAtaSmartDataSelfTest
        """

        self._self_test = self_test

    @property
    def capabilities(self):
        """Gets the capabilities of this SmartSsdAtaSmartData.  # noqa: E501


        :return: The capabilities of this SmartSsdAtaSmartData.  # noqa: E501
        :rtype: SmartSsdAtaSmartDataCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this SmartSsdAtaSmartData.


        :param capabilities: The capabilities of this SmartSsdAtaSmartData.  # noqa: E501
        :type: SmartSsdAtaSmartDataCapabilities
        """

        self._capabilities = capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartSsdAtaSmartData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
