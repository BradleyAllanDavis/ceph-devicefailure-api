# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmartSsdAtaLogDirectoryTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'int',
        'name': 'str',
        'read': 'bool',
        'write': 'bool',
        'gp_sectors': 'int',
        'smart_sectors': 'int'
    }

    attribute_map = {
        'address': 'address',
        'name': 'name',
        'read': 'read',
        'write': 'write',
        'gp_sectors': 'gp_sectors',
        'smart_sectors': 'smart_sectors'
    }

    def __init__(self, address=None, name=None, read=None, write=None, gp_sectors=None, smart_sectors=None):  # noqa: E501
        """SmartSsdAtaLogDirectoryTable - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._name = None
        self._read = None
        self._write = None
        self._gp_sectors = None
        self._smart_sectors = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if name is not None:
            self.name = name
        if read is not None:
            self.read = read
        if write is not None:
            self.write = write
        if gp_sectors is not None:
            self.gp_sectors = gp_sectors
        if smart_sectors is not None:
            self.smart_sectors = smart_sectors

    @property
    def address(self):
        """Gets the address of this SmartSsdAtaLogDirectoryTable.  # noqa: E501


        :return: The address of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :rtype: int
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SmartSsdAtaLogDirectoryTable.


        :param address: The address of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :type: int
        """

        self._address = address

    @property
    def name(self):
        """Gets the name of this SmartSsdAtaLogDirectoryTable.  # noqa: E501


        :return: The name of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SmartSsdAtaLogDirectoryTable.


        :param name: The name of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def read(self):
        """Gets the read of this SmartSsdAtaLogDirectoryTable.  # noqa: E501


        :return: The read of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this SmartSsdAtaLogDirectoryTable.


        :param read: The read of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def write(self):
        """Gets the write of this SmartSsdAtaLogDirectoryTable.  # noqa: E501


        :return: The write of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :rtype: bool
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this SmartSsdAtaLogDirectoryTable.


        :param write: The write of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :type: bool
        """

        self._write = write

    @property
    def gp_sectors(self):
        """Gets the gp_sectors of this SmartSsdAtaLogDirectoryTable.  # noqa: E501


        :return: The gp_sectors of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :rtype: int
        """
        return self._gp_sectors

    @gp_sectors.setter
    def gp_sectors(self, gp_sectors):
        """Sets the gp_sectors of this SmartSsdAtaLogDirectoryTable.


        :param gp_sectors: The gp_sectors of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :type: int
        """

        self._gp_sectors = gp_sectors

    @property
    def smart_sectors(self):
        """Gets the smart_sectors of this SmartSsdAtaLogDirectoryTable.  # noqa: E501


        :return: The smart_sectors of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :rtype: int
        """
        return self._smart_sectors

    @smart_sectors.setter
    def smart_sectors(self, smart_sectors):
        """Sets the smart_sectors of this SmartSsdAtaLogDirectoryTable.


        :param smart_sectors: The smart_sectors of this SmartSsdAtaLogDirectoryTable.  # noqa: E501
        :type: int
        """

        self._smart_sectors = smart_sectors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartSsdAtaLogDirectoryTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
