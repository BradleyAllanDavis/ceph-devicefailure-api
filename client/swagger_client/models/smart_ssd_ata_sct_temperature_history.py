# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.smart_ssd_ata_sct_temperature_history_temperature import SmartSsdAtaSctTemperatureHistoryTemperature  # noqa: F401,E501


class SmartSsdAtaSctTemperatureHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'int',
        'sampling_period_minutes': 'int',
        'logging_interval_minutes': 'int',
        'temperature': 'SmartSsdAtaSctTemperatureHistoryTemperature',
        'size': 'int',
        'index': 'int',
        'table': 'list[int]'
    }

    attribute_map = {
        'version': 'version',
        'sampling_period_minutes': 'sampling_period_minutes',
        'logging_interval_minutes': 'logging_interval_minutes',
        'temperature': 'temperature',
        'size': 'size',
        'index': 'index',
        'table': 'table'
    }

    def __init__(self, version=None, sampling_period_minutes=None, logging_interval_minutes=None, temperature=None, size=None, index=None, table=None):  # noqa: E501
        """SmartSsdAtaSctTemperatureHistory - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._sampling_period_minutes = None
        self._logging_interval_minutes = None
        self._temperature = None
        self._size = None
        self._index = None
        self._table = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if sampling_period_minutes is not None:
            self.sampling_period_minutes = sampling_period_minutes
        if logging_interval_minutes is not None:
            self.logging_interval_minutes = logging_interval_minutes
        if temperature is not None:
            self.temperature = temperature
        if size is not None:
            self.size = size
        if index is not None:
            self.index = index
        if table is not None:
            self.table = table

    @property
    def version(self):
        """Gets the version of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501


        :return: The version of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SmartSsdAtaSctTemperatureHistory.


        :param version: The version of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def sampling_period_minutes(self):
        """Gets the sampling_period_minutes of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501


        :return: The sampling_period_minutes of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :rtype: int
        """
        return self._sampling_period_minutes

    @sampling_period_minutes.setter
    def sampling_period_minutes(self, sampling_period_minutes):
        """Sets the sampling_period_minutes of this SmartSsdAtaSctTemperatureHistory.


        :param sampling_period_minutes: The sampling_period_minutes of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :type: int
        """

        self._sampling_period_minutes = sampling_period_minutes

    @property
    def logging_interval_minutes(self):
        """Gets the logging_interval_minutes of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501


        :return: The logging_interval_minutes of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :rtype: int
        """
        return self._logging_interval_minutes

    @logging_interval_minutes.setter
    def logging_interval_minutes(self, logging_interval_minutes):
        """Sets the logging_interval_minutes of this SmartSsdAtaSctTemperatureHistory.


        :param logging_interval_minutes: The logging_interval_minutes of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :type: int
        """

        self._logging_interval_minutes = logging_interval_minutes

    @property
    def temperature(self):
        """Gets the temperature of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501


        :return: The temperature of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :rtype: SmartSsdAtaSctTemperatureHistoryTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this SmartSsdAtaSctTemperatureHistory.


        :param temperature: The temperature of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :type: SmartSsdAtaSctTemperatureHistoryTemperature
        """

        self._temperature = temperature

    @property
    def size(self):
        """Gets the size of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501


        :return: The size of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SmartSsdAtaSctTemperatureHistory.


        :param size: The size of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def index(self):
        """Gets the index of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501


        :return: The index of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SmartSsdAtaSctTemperatureHistory.


        :param index: The index of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def table(self):
        """Gets the table of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501


        :return: The table of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :rtype: list[int]
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this SmartSsdAtaSctTemperatureHistory.


        :param table: The table of this SmartSsdAtaSctTemperatureHistory.  # noqa: E501
        :type: list[int]
        """

        self._table = table

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartSsdAtaSctTemperatureHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
