# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmartNvmeNvmeSmartHealthInformationLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'critical_warning': 'int',
        'temperature': 'int',
        'available_spare': 'int',
        'available_spare_threshold': 'int',
        'percentage_used': 'int',
        'data_units_read': 'int',
        'data_units_written': 'int',
        'host_reads': 'int',
        'host_writes': 'int',
        'controller_busy_time': 'int',
        'power_cycles': 'int',
        'power_on_hours': 'int',
        'unsafe_shutdowns': 'int',
        'media_errors': 'int',
        'num_err_log_entries': 'int',
        'warning_temp_time': 'int',
        'critical_comp_time': 'int'
    }

    attribute_map = {
        'critical_warning': 'critical_warning',
        'temperature': 'temperature',
        'available_spare': 'available_spare',
        'available_spare_threshold': 'available_spare_threshold',
        'percentage_used': 'percentage_used',
        'data_units_read': 'data_units_read',
        'data_units_written': 'data_units_written',
        'host_reads': 'host_reads',
        'host_writes': 'host_writes',
        'controller_busy_time': 'controller_busy_time',
        'power_cycles': 'power_cycles',
        'power_on_hours': 'power_on_hours',
        'unsafe_shutdowns': 'unsafe_shutdowns',
        'media_errors': 'media_errors',
        'num_err_log_entries': 'num_err_log_entries',
        'warning_temp_time': 'warning_temp_time',
        'critical_comp_time': 'critical_comp_time'
    }

    def __init__(self, critical_warning=None, temperature=None, available_spare=None, available_spare_threshold=None, percentage_used=None, data_units_read=None, data_units_written=None, host_reads=None, host_writes=None, controller_busy_time=None, power_cycles=None, power_on_hours=None, unsafe_shutdowns=None, media_errors=None, num_err_log_entries=None, warning_temp_time=None, critical_comp_time=None):  # noqa: E501
        """SmartNvmeNvmeSmartHealthInformationLog - a model defined in Swagger"""  # noqa: E501

        self._critical_warning = None
        self._temperature = None
        self._available_spare = None
        self._available_spare_threshold = None
        self._percentage_used = None
        self._data_units_read = None
        self._data_units_written = None
        self._host_reads = None
        self._host_writes = None
        self._controller_busy_time = None
        self._power_cycles = None
        self._power_on_hours = None
        self._unsafe_shutdowns = None
        self._media_errors = None
        self._num_err_log_entries = None
        self._warning_temp_time = None
        self._critical_comp_time = None
        self.discriminator = None

        if critical_warning is not None:
            self.critical_warning = critical_warning
        if temperature is not None:
            self.temperature = temperature
        if available_spare is not None:
            self.available_spare = available_spare
        if available_spare_threshold is not None:
            self.available_spare_threshold = available_spare_threshold
        if percentage_used is not None:
            self.percentage_used = percentage_used
        if data_units_read is not None:
            self.data_units_read = data_units_read
        if data_units_written is not None:
            self.data_units_written = data_units_written
        if host_reads is not None:
            self.host_reads = host_reads
        if host_writes is not None:
            self.host_writes = host_writes
        if controller_busy_time is not None:
            self.controller_busy_time = controller_busy_time
        if power_cycles is not None:
            self.power_cycles = power_cycles
        if power_on_hours is not None:
            self.power_on_hours = power_on_hours
        if unsafe_shutdowns is not None:
            self.unsafe_shutdowns = unsafe_shutdowns
        if media_errors is not None:
            self.media_errors = media_errors
        if num_err_log_entries is not None:
            self.num_err_log_entries = num_err_log_entries
        if warning_temp_time is not None:
            self.warning_temp_time = warning_temp_time
        if critical_comp_time is not None:
            self.critical_comp_time = critical_comp_time

    @property
    def critical_warning(self):
        """Gets the critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._critical_warning

    @critical_warning.setter
    def critical_warning(self, critical_warning):
        """Sets the critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.


        :param critical_warning: The critical_warning of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._critical_warning = critical_warning

    @property
    def temperature(self):
        """Gets the temperature of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The temperature of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this SmartNvmeNvmeSmartHealthInformationLog.


        :param temperature: The temperature of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._temperature = temperature

    @property
    def available_spare(self):
        """Gets the available_spare of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The available_spare of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._available_spare

    @available_spare.setter
    def available_spare(self, available_spare):
        """Sets the available_spare of this SmartNvmeNvmeSmartHealthInformationLog.


        :param available_spare: The available_spare of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._available_spare = available_spare

    @property
    def available_spare_threshold(self):
        """Gets the available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._available_spare_threshold

    @available_spare_threshold.setter
    def available_spare_threshold(self, available_spare_threshold):
        """Sets the available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.


        :param available_spare_threshold: The available_spare_threshold of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._available_spare_threshold = available_spare_threshold

    @property
    def percentage_used(self):
        """Gets the percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._percentage_used

    @percentage_used.setter
    def percentage_used(self, percentage_used):
        """Sets the percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.


        :param percentage_used: The percentage_used of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._percentage_used = percentage_used

    @property
    def data_units_read(self):
        """Gets the data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._data_units_read

    @data_units_read.setter
    def data_units_read(self, data_units_read):
        """Sets the data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.


        :param data_units_read: The data_units_read of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._data_units_read = data_units_read

    @property
    def data_units_written(self):
        """Gets the data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._data_units_written

    @data_units_written.setter
    def data_units_written(self, data_units_written):
        """Sets the data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.


        :param data_units_written: The data_units_written of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._data_units_written = data_units_written

    @property
    def host_reads(self):
        """Gets the host_reads of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The host_reads of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._host_reads

    @host_reads.setter
    def host_reads(self, host_reads):
        """Sets the host_reads of this SmartNvmeNvmeSmartHealthInformationLog.


        :param host_reads: The host_reads of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._host_reads = host_reads

    @property
    def host_writes(self):
        """Gets the host_writes of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The host_writes of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._host_writes

    @host_writes.setter
    def host_writes(self, host_writes):
        """Sets the host_writes of this SmartNvmeNvmeSmartHealthInformationLog.


        :param host_writes: The host_writes of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._host_writes = host_writes

    @property
    def controller_busy_time(self):
        """Gets the controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._controller_busy_time

    @controller_busy_time.setter
    def controller_busy_time(self, controller_busy_time):
        """Sets the controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :param controller_busy_time: The controller_busy_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._controller_busy_time = controller_busy_time

    @property
    def power_cycles(self):
        """Gets the power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._power_cycles

    @power_cycles.setter
    def power_cycles(self, power_cycles):
        """Sets the power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.


        :param power_cycles: The power_cycles of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._power_cycles = power_cycles

    @property
    def power_on_hours(self):
        """Gets the power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._power_on_hours

    @power_on_hours.setter
    def power_on_hours(self, power_on_hours):
        """Sets the power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.


        :param power_on_hours: The power_on_hours of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._power_on_hours = power_on_hours

    @property
    def unsafe_shutdowns(self):
        """Gets the unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._unsafe_shutdowns

    @unsafe_shutdowns.setter
    def unsafe_shutdowns(self, unsafe_shutdowns):
        """Sets the unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.


        :param unsafe_shutdowns: The unsafe_shutdowns of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._unsafe_shutdowns = unsafe_shutdowns

    @property
    def media_errors(self):
        """Gets the media_errors of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The media_errors of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._media_errors

    @media_errors.setter
    def media_errors(self, media_errors):
        """Sets the media_errors of this SmartNvmeNvmeSmartHealthInformationLog.


        :param media_errors: The media_errors of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._media_errors = media_errors

    @property
    def num_err_log_entries(self):
        """Gets the num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._num_err_log_entries

    @num_err_log_entries.setter
    def num_err_log_entries(self, num_err_log_entries):
        """Sets the num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.


        :param num_err_log_entries: The num_err_log_entries of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._num_err_log_entries = num_err_log_entries

    @property
    def warning_temp_time(self):
        """Gets the warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._warning_temp_time

    @warning_temp_time.setter
    def warning_temp_time(self, warning_temp_time):
        """Sets the warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :param warning_temp_time: The warning_temp_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._warning_temp_time = warning_temp_time

    @property
    def critical_comp_time(self):
        """Gets the critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501


        :return: The critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :rtype: int
        """
        return self._critical_comp_time

    @critical_comp_time.setter
    def critical_comp_time(self, critical_comp_time):
        """Sets the critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.


        :param critical_comp_time: The critical_comp_time of this SmartNvmeNvmeSmartHealthInformationLog.  # noqa: E501
        :type: int
        """

        self._critical_comp_time = critical_comp_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartNvmeNvmeSmartHealthInformationLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
