# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.smart_ssd_ata_sct_status_temperature import SmartSsdAtaSctStatusTemperature  # noqa: F401,E501
from swagger_client.models.smart_ssd_ata_smart_data_offline_data_collection_status import SmartSsdAtaSmartDataOfflineDataCollectionStatus  # noqa: F401,E501


class SmartSsdAtaSctStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format_version': 'int',
        'sct_version': 'int',
        'device_state': 'SmartSsdAtaSmartDataOfflineDataCollectionStatus',
        'temperature': 'SmartSsdAtaSctStatusTemperature',
        'vendor_specific': 'list[int]'
    }

    attribute_map = {
        'format_version': 'format_version',
        'sct_version': 'sct_version',
        'device_state': 'device_state',
        'temperature': 'temperature',
        'vendor_specific': 'vendor_specific'
    }

    def __init__(self, format_version=None, sct_version=None, device_state=None, temperature=None, vendor_specific=None):  # noqa: E501
        """SmartSsdAtaSctStatus - a model defined in Swagger"""  # noqa: E501

        self._format_version = None
        self._sct_version = None
        self._device_state = None
        self._temperature = None
        self._vendor_specific = None
        self.discriminator = None

        if format_version is not None:
            self.format_version = format_version
        if sct_version is not None:
            self.sct_version = sct_version
        if device_state is not None:
            self.device_state = device_state
        if temperature is not None:
            self.temperature = temperature
        if vendor_specific is not None:
            self.vendor_specific = vendor_specific

    @property
    def format_version(self):
        """Gets the format_version of this SmartSsdAtaSctStatus.  # noqa: E501


        :return: The format_version of this SmartSsdAtaSctStatus.  # noqa: E501
        :rtype: int
        """
        return self._format_version

    @format_version.setter
    def format_version(self, format_version):
        """Sets the format_version of this SmartSsdAtaSctStatus.


        :param format_version: The format_version of this SmartSsdAtaSctStatus.  # noqa: E501
        :type: int
        """

        self._format_version = format_version

    @property
    def sct_version(self):
        """Gets the sct_version of this SmartSsdAtaSctStatus.  # noqa: E501


        :return: The sct_version of this SmartSsdAtaSctStatus.  # noqa: E501
        :rtype: int
        """
        return self._sct_version

    @sct_version.setter
    def sct_version(self, sct_version):
        """Sets the sct_version of this SmartSsdAtaSctStatus.


        :param sct_version: The sct_version of this SmartSsdAtaSctStatus.  # noqa: E501
        :type: int
        """

        self._sct_version = sct_version

    @property
    def device_state(self):
        """Gets the device_state of this SmartSsdAtaSctStatus.  # noqa: E501


        :return: The device_state of this SmartSsdAtaSctStatus.  # noqa: E501
        :rtype: SmartSsdAtaSmartDataOfflineDataCollectionStatus
        """
        return self._device_state

    @device_state.setter
    def device_state(self, device_state):
        """Sets the device_state of this SmartSsdAtaSctStatus.


        :param device_state: The device_state of this SmartSsdAtaSctStatus.  # noqa: E501
        :type: SmartSsdAtaSmartDataOfflineDataCollectionStatus
        """

        self._device_state = device_state

    @property
    def temperature(self):
        """Gets the temperature of this SmartSsdAtaSctStatus.  # noqa: E501


        :return: The temperature of this SmartSsdAtaSctStatus.  # noqa: E501
        :rtype: SmartSsdAtaSctStatusTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this SmartSsdAtaSctStatus.


        :param temperature: The temperature of this SmartSsdAtaSctStatus.  # noqa: E501
        :type: SmartSsdAtaSctStatusTemperature
        """

        self._temperature = temperature

    @property
    def vendor_specific(self):
        """Gets the vendor_specific of this SmartSsdAtaSctStatus.  # noqa: E501


        :return: The vendor_specific of this SmartSsdAtaSctStatus.  # noqa: E501
        :rtype: list[int]
        """
        return self._vendor_specific

    @vendor_specific.setter
    def vendor_specific(self, vendor_specific):
        """Sets the vendor_specific of this SmartSsdAtaSctStatus.


        :param vendor_specific: The vendor_specific of this SmartSsdAtaSctStatus.  # noqa: E501
        :type: list[int]
        """

        self._vendor_specific = vendor_specific

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartSsdAtaSctStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
