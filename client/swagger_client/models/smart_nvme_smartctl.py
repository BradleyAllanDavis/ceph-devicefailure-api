# coding: utf-8

"""
    Ceph SMART Metrics

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmartNvmeSmartctl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'list[int]',
        'svn_revision': 'str',
        'platform_info': 'str',
        'build_info': 'str',
        'argv': 'list[str]',
        'exit_status': 'int'
    }

    attribute_map = {
        'version': 'version',
        'svn_revision': 'svn_revision',
        'platform_info': 'platform_info',
        'build_info': 'build_info',
        'argv': 'argv',
        'exit_status': 'exit_status'
    }

    def __init__(self, version=None, svn_revision=None, platform_info=None, build_info=None, argv=None, exit_status=None):  # noqa: E501
        """SmartNvmeSmartctl - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._svn_revision = None
        self._platform_info = None
        self._build_info = None
        self._argv = None
        self._exit_status = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if svn_revision is not None:
            self.svn_revision = svn_revision
        if platform_info is not None:
            self.platform_info = platform_info
        if build_info is not None:
            self.build_info = build_info
        if argv is not None:
            self.argv = argv
        if exit_status is not None:
            self.exit_status = exit_status

    @property
    def version(self):
        """Gets the version of this SmartNvmeSmartctl.  # noqa: E501


        :return: The version of this SmartNvmeSmartctl.  # noqa: E501
        :rtype: list[int]
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SmartNvmeSmartctl.


        :param version: The version of this SmartNvmeSmartctl.  # noqa: E501
        :type: list[int]
        """

        self._version = version

    @property
    def svn_revision(self):
        """Gets the svn_revision of this SmartNvmeSmartctl.  # noqa: E501


        :return: The svn_revision of this SmartNvmeSmartctl.  # noqa: E501
        :rtype: str
        """
        return self._svn_revision

    @svn_revision.setter
    def svn_revision(self, svn_revision):
        """Sets the svn_revision of this SmartNvmeSmartctl.


        :param svn_revision: The svn_revision of this SmartNvmeSmartctl.  # noqa: E501
        :type: str
        """

        self._svn_revision = svn_revision

    @property
    def platform_info(self):
        """Gets the platform_info of this SmartNvmeSmartctl.  # noqa: E501


        :return: The platform_info of this SmartNvmeSmartctl.  # noqa: E501
        :rtype: str
        """
        return self._platform_info

    @platform_info.setter
    def platform_info(self, platform_info):
        """Sets the platform_info of this SmartNvmeSmartctl.


        :param platform_info: The platform_info of this SmartNvmeSmartctl.  # noqa: E501
        :type: str
        """

        self._platform_info = platform_info

    @property
    def build_info(self):
        """Gets the build_info of this SmartNvmeSmartctl.  # noqa: E501


        :return: The build_info of this SmartNvmeSmartctl.  # noqa: E501
        :rtype: str
        """
        return self._build_info

    @build_info.setter
    def build_info(self, build_info):
        """Sets the build_info of this SmartNvmeSmartctl.


        :param build_info: The build_info of this SmartNvmeSmartctl.  # noqa: E501
        :type: str
        """

        self._build_info = build_info

    @property
    def argv(self):
        """Gets the argv of this SmartNvmeSmartctl.  # noqa: E501


        :return: The argv of this SmartNvmeSmartctl.  # noqa: E501
        :rtype: list[str]
        """
        return self._argv

    @argv.setter
    def argv(self, argv):
        """Sets the argv of this SmartNvmeSmartctl.


        :param argv: The argv of this SmartNvmeSmartctl.  # noqa: E501
        :type: list[str]
        """

        self._argv = argv

    @property
    def exit_status(self):
        """Gets the exit_status of this SmartNvmeSmartctl.  # noqa: E501


        :return: The exit_status of this SmartNvmeSmartctl.  # noqa: E501
        :rtype: int
        """
        return self._exit_status

    @exit_status.setter
    def exit_status(self, exit_status):
        """Sets the exit_status of this SmartNvmeSmartctl.


        :param exit_status: The exit_status of this SmartNvmeSmartctl.  # noqa: E501
        :type: int
        """

        self._exit_status = exit_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartNvmeSmartctl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
